generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @unique
  name          String
  imageUrl      String
  email         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdMeals  Meal[]
  favorites     FavoriteMeals[]
  comments      Comment[]       @relation("ProfileComments")
  subcomments   Subcomment[]    @relation("profile")
  rating        Rating[]
  notifications Notification[]
  kanbanBoard   KanbanBoard?
}

model Meal {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  isEdited       Boolean?        @default(false)
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?
  creatorId      String          @db.ObjectId
  creator        Profile?        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  favoritedBy    FavoriteMeals[]
  cookingTime    Int?
  coverImage     String?
  comments       Comment[]       @relation("MealComments")
  ratings        Rating[]
  notifications  Notification[]
  kanbanColumn   KanbanColumn?   @relation(fields: [kanbanColumnId], references: [id])
  kanbanColumnId String?         @db.ObjectId

  @@index([creatorId])
  @@index([kanbanColumnId])
}

model FavoriteMeals {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  profileId String  
  mealId    String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  meal      Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([mealId])
  @@unique([profileId, mealId])
}

model Comment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profileId     String         @db.ObjectId
  mealId        String         @db.ObjectId
  commentId     String         @default("")
  profile       Profile        @relation("ProfileComments", fields: [profileId], references: [id])
  meal          Meal           @relation("MealComments", fields: [mealId], references: [id], onDelete: Cascade)
  subcomments   Subcomment[]   @relation("comment")
  ratings       Rating[]
  notifications Notification[]

  @@index([profileId])
  @@index([mealId])
}

model Subcomment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mealId    String
  profileId String   @db.ObjectId
  commentId String   @db.ObjectId
  profile   Profile  @relation("profile", fields: [profileId], references: [id])
  comment   Comment  @relation("comment", fields: [commentId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([commentId])
}

model Rating {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ratingValue Int
  profileId   String   @db.ObjectId
  mealId      String   @db.ObjectId
  commentId   String?  @db.ObjectId
  createdAt   DateTime @default(now())

  profile Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  meal    Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([mealId])
  @@index([commentId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String   @db.ObjectId
  mealId    String   @db.ObjectId
  commentId String?  @db.ObjectId

  profile Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  meal    Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([mealId])
  @@index([commentId])
}

model KanbanBoard {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  userId  String         @unique @db.ObjectId
  user    Profile        @relation(fields: [userId], references: [id])
  columns KanbanColumn[]
}

model KanbanColumn {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  position      Int
  meals         Meal[]
  kanbanBoard   KanbanBoard @relation(fields: [kanbanBoardId], references: [id])
  kanbanBoardId String      @db.ObjectId

  @@index([kanbanBoardId])
}
